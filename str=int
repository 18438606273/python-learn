from functools import reduce

DIGITS = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}
def str2float(s):
    n=0
    L1=[]
    L2=[]
    while s[n]!='.' :
        L1.append(s[n])
        n=n+1
    L2=[k for k in s[n+1:]]
    
    def fn1(x, y):
        return x * 10 + y
        
    def char2num(s):
        return DIGITS[s]
    z1= reduce(fn1, map(char2num, L1))
    z2=reduce(fn1, map(char2num, L2))
    n=len(s)-n-1
    z3=z2/(10**n)
    return z1+z3
z=str2float('123.1243')





from functools import reduce
def fn(x, y):
     return x * 10 + y

def char2num(s):
     digits = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}
     return digits[s]

n=reduce (fn, map(char2num, '13579'))
print (n)
